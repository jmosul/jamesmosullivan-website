service: jamesmosullivan-personal-website

plugins:
  - serverless-s3-sync
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: dev
  postsTableName: 'posts'
  dynamodb:
    start:
      migrate: true
  siteName: jamesmosullivan
  bucketName: jamesmosullivan.uk
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: dist
  hostedZoneName: jamesmosullivan.uk.
  aliasHostedZoneId: Z1BKCTXD74EZPE
  aliasDNSName: s3-website-eu-west-1.amazonaws.com

provider:
  name: aws
  stage: ${self:custom.stage}
  runtime: nodejs8.10
  profile: serverless
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["PostsDynamoDBTable", "Arn" ] }
  environment:
    STAGE: ${self:custom.stage}
    POSTS_TABLE: ${self:custom.postsTableName}

functions:
  posts_store:
    handler: handler.posts_store
    events:
      - http:
          path: posts
          method: post
  posts_index:
    handler: handler.posts_index
    events:
      - http:
          path: posts
          method: get

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                  "arn:aws:s3:::",
                  {
                    "Ref": "StaticSite"
                  },
                  "/*"
                ]
                ]
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: ${self:custom.aliasDNSName}
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.hostedZoneName}
        Name:
          Ref: StaticSite
        Type: 'A'
    PostsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: pageId
            AttributeType: S
        KeySchema:
          - AttributeName: pageId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.postsTableName}
