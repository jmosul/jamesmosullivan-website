service: jamesmosullivan-personal-website

plugins:
  - serverless-s3-sync
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: dev
  cognitoPoolName: 'jade-users'
  postsTableName: 'posts'
  dynamodb:
    start:
      migrate: true
  siteName: jamesmosullivan
  bucketName: jamesmosullivan.uk
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: dist
  hostedZoneName: jamesmosullivan.uk.
  aliasHostedZoneId: Z2FDTNDATAQYW2

provider:
  name: aws
  stage: ${self:custom.stage}
  runtime: nodejs8.10
  profile: serverless
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["PostsDynamoDBTable", "Arn" ] }
  environment:
    STAGE: ${self:custom.stage}
    POSTS_TABLE: ${self:custom.postsTableName}

functions:
  posts_store:
    handler: handler.posts_store
    events:
      - http:
          path: posts
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  posts_index:
    handler: handler.posts_index
    events:
      - http:
          path: posts
          method: get

package:
  exclude:
    - ".*/**"
    - "dist/**"
    - "src/**"
    - "public/**"

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                  "arn:aws:s3:::",
                  {
                    "Ref": "StaticSite"
                  },
                  "/*"
                ]
                ]
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: !GetAtt
            - StaticSiteCDN
            - WebsiteURL
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.hostedZoneName}
        Name:
          Ref: StaticSite
        Type: 'A'
    StaticSiteCDN:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt
                - StaticSite
                - DomainName
              Id: StaticSiteOrigin
              S3OriginConfig: {}
          Aliases: 
            - www.jamesmosullivan.uk
            - jamesmosullivan.uk
          Enabled: 'true'
          DefaultCacheBehavior:
            TargetOriginId: StaticSiteOrigin
            ForwardedValues:
              QueryString: 'false'
            ViewerProtocolPolicy: allow-all
          PriceClass: "PriceClass_100"
          ViewerCertificate:
            AcmCertificateArn: 'arn:aws:acm:eu-west-1:192047392996:certificate/e281dbf6-3a2e-4c40-a0a7-7d683ddf2d19'
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.cognitoPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.cognitoPoolName}-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:custom.cognitoPoolName}-cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    PostsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: pageId
            AttributeType: S
        KeySchema:
          - AttributeName: pageId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.postsTableName}
